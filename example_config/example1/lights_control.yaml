#lights_list:  # Just a list of lights to see them all in one place
## Test Led on Arduino board
#  - test_led
## Common lights
#  - bedroom_main
#  - bedroom_contour
#  - guestroom_main
#  - guestroom_back
#  - kid1_center
#  - kid1_rail
#  - kid2_sun
#  - kid2_rail
#  - corridor_left
#  - corridor_right
#  - corridor_center
#  - kitchen_cook
#  - kitchen_table
#  - cabinet
#  - shower
#  - cloack_room
## Lights with nightlight function
#  - bathroom
#  - laundry
## Relays
#  - switch.BathroomFan
#  - switch.bathroom_bidet
#  - switch.ShowerFan
#  - switch.shower_bidet

###########################################################################################
# Switch buttons setup
switch_map:
  test_led:
    - {button: TestButton, event: single, switch_off: 5}
    - {button: TestButton, event: double, switch_off: 3, magic: yes}

  # all_lights:   # Turn off all lights with just single switch button
  #  - {button: Corrdior, event: both_double, lights_on: [], lights_off:[group.lights_all]}

  bedroom_main:      [{button: Bedroom, event: left}]
  bedroom_contour:   [{button: Bedroom, event: right}]
  befroom_all:       [{button: Bedroom, event: both, lights_on: [bedroom_main, bedroom_contour]}]
  # NOTE: separate rule is required to turn ON/OFF bedroom_main and bedroom_contour lights simultaneously
  # otherwise (if set bedroom_main events to [left, both] and bedroom_contour events to [right, both]
  # bedroom_main and bedroom_contour lights may toggle ON/OFF out of phase by 'both' event
  # i.e. if bedroom_main were turned ON and bedroom_contour were turned OFF then 'both' event
  # would toggle bedroom_main to OFF and bedroom_contour to ON
  # To avoid this separate rule like this is required

  guestroom_main:    [{button: Guestroom, event: left}]
  guestroom_back:    [{button: Guestroom, event: right}]
  guestasdfroom_all: [{button: Guestroom, event: both, lights_on: [bedroom_main, bedroom_contour]}]

  kid1_center: [{button: Kid1, event: left}]
  kid1_rail:   [{button: Kid1, event: right}]
  kid1_all:    [{button: Kid1, event: both, lights_on: [kid1_center, kid1_rail]}]

  kid2_sun:   [{button: Kid2, event: left}]
  kid2_rail:  [{button: Kid2, event: right}]
  kid2_all:   [{button: Kid2, event: both, lights_on: [kid2_sun, kid2_rail]}]

  corridor_left:
    - {button: Corrdior, event: right, lights_on: [corridor_left, corridor_center], lights_off: corridor_left}
      # Switch button above also turns ON Center corridor section
    - {button: Kitchen1, event: left_double}
  corridor_right:
    - {button: Corrdior, event: left, lights_on: [corridor_right, corridor_center], lights_off: corridor_right}
      # Switch button above also also turns ON Center corridor section
    - {button: Kitchen2, event: right_double}
  corridor_center:
    - {button: Corrdior, event: both}

  kitchen:
    - {button: Kitchen1, event: right, lights_on: [kitchen_cook, kitchen_table]}
    - {button: Kitchen2, event: right, lights_on: [kitchen_cook, kitchen_table]}
  cabinet:
    - {button: Kitchen1, event: left}
    - {button: Kitchen2, event: left}
  kitchen_cabinet:
    - {button: Kitchen1, event: double, lights_on: [kitchen_cook, kitchen_table, cabinet]}
    - {button: Kitchen2, event: double, lights_on: [kitchen_cook, kitchen_table, cabinet]}

  bathroom:
    - {button: Bathroom, event: single, switch_off: 15}
  BathroomFan:
    - {button: Bathroom, event: double, switch_off: 15} # TODO: is there triple click? as double is wanted for magic click
  shower:
    - {button: Shower, event: single, switch_off: 15}
  ShowerFan:
    - {button: Shower, event: double, switch_off: 15}   # TODO: is there triple click? as double is wanted for magic click

  laundry:     [{button: Corridor, event: right_double, switch_off: 10}]
  cloack_room: [{button: Corridor, event: left_double, switch_off: 10}]

###########################################################################################
# Sensors and states automation
sensor_default_switch_off: 5

sensor_map:
  bathroom:
    - {sensor: binary_sensor.Bathroom_occupancy, value: 'on'}
    # NOTE: occupancy sensor may not work well in high humidity so prevent lights from turning off
    - {sensor: Bathroom_humidity, value: [75,100], switch_off: 1}
  shower:
    - {sensor: binary_sensor.Shower_occupancy, value: 'on'}
    # NOTE: occupancy sensor may not work well in high humidity so prevent lights from turning off
    - {sensor: Shower_humidity, value: [75,100], switch_off: 1}
  laundry:
    - {sensor: binary_sensor.Laundry_occupancy, value: 'on'}
  cloackroom:
    - {sensor: binary_sensor.Cloackroom_occupancy, value: 'on'}
  switch.bathroom_bidet:
    - {sensor: light.bathroom, value: 'on', 'auto': yes, switch_off: 1}
  switch.BathroomFan:
    - {sensor: Bathroom_humidity, value: [75,100], 'auto': yes, switch_off: 15}
  switch.shower_bidet:
    - {sensor: light.shower, value: 'on', 'auto': yes, switch_off: 1}
  switch.ShowerFan:
    - {sensor: Shower_humidity, value: [75,100], 'auto': yes, switch_off: 15}

###########################################################################################
# Power saving and dynamic lighting
power_save:
  common_powersave:
    timeout: 60
    when: ["00:00:00", "06:59:59"]
    # lights: [group.lights_all]
    lights: [corridor_center]

on_state:
  test_led:
    - sensor: light.shower
      value: 'on'
      state: 150
    - when: ["00:00:00", "06:59:59"]
      state: 100
    - when: [["22:00:00", "23:59:59"], ["07:00:00", "08:59:59"]]
      state: 200

off_state:
  test_led:
    - sensor: light.shower
      value: 'on'
      state: 50
    - when: ["23:00:00", "07:59:59"]
      state: 50
    - when: [["22:00:00", "22:59:59"], ["08:00:00", "08:59:59"]]
      state: 100
    - when: [["11:00:00", "12:59:59"], ["14:00:00", "15:59:59"]]
      state: 100
  # Nightlights aren't turned OFF completely on night when everybody is fell asleep
  bathroom:
    # NOTE: first comes few conditions to override 'sun' rule below to avoid turning lights on before it's required
    - when: ["07:00:00", "22:59:59"]
      state: 'off'
    - sensor: light.kid1_center
      value: 'on'
      state: 'off'
    - sensor: light.kid1_rail
      value: 'on'
      state: 'off'
    - sensor: light.cabinet
      value: 'on'
      state: 'off'
    - sensor: light.corridor_right
      value: 'on'
      state: 'off'
    # At last condition to turn ON
    - sensor: sun.sun
      value: 'off'  # 'below_horizon'
      state: 'on'

  laundry:
    # NOTE: first comes few conditions to override 'sun' rule below to avoid turning lights on before it's required
    - when: ["07:00:00", "22:59:59"]
      state: 'off'
    - sensor: light.bedroom_main
      value: 'on'
      state: 'off'
    - sensor: light.bedroom_contour
      value: 'on'
      state: 'off'
    - sensor: light.corridor_center
      value: 'on'
      state: 'off'
    - sensor: light.corridor_left
      value: 'on'
      state: 'off'
    # At last condition to turn ON
    - sensor: sun.sun
      value: 'off'  # 'below_horizon'
      state: 'on'


###########################################################################################
# Automation control
notify_turn_off:
  test_led:
    kind: dim
    before: 30

  no_surprise:
    kind: flash
    before: 60
    lights: # NOTE: corridor is not in list
      - bedroom_main
      - bedroom_contour
      - guestroom_main
      - guestroom_back
      - kid1_center
      - kid1_rail
      - kid2_sun
      - kid2_rail
      - kitchen_cook
      - kitchen_table
      - cabinet
      - bathroom
      - shower
      - laundry
      - cloack_room

automation_map:
  # Test Led on Arduino board
  lights_test_led: test_led
  # Common lights
  lights_bedroom: [bedroom_main, bedroom_contour]
  lights_guestroom: [guestroom_main, guestroom_back]
  lights_kid1: [kid1_center, kid1_rail]
  lights_kid2: [kid2_sun, kid2_rail]
  lights_corridor: [corridor_left, corridor_right, corridor_center]
  lights_kitchen: [kitchen_cook, kitchen_table]
  lights_cabinet: cabinet
  lights_bathroom: bathroom
  lights_shower: shower
  lights_service: [cloack_room, laundry]
  relays_bathroom: [switch.BathroomFan, switch.bathroom_bidet]
  relays_shower: [switch.ShowerFan, switch.shower_bidet]
